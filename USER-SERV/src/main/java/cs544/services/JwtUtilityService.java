package cs544.services;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import cs544.models.User;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.io.Encoders;
import io.jsonwebtoken.security.Keys;

import javax.crypto.SecretKey;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

@Service
public class JwtUtilityService {
    // our current secret (generated by the below main method)
    private static final String SECRET = "epVbQZQxG3N2WDN2XtKCCV8sJPmuTEna1QifL2FrbKw=";
    // private SecretKey key = Keys.hmacShaKeyFor(Decoders.BASE64.decode(SECRET));

    @Value("${app.jwt.issuer}")
    private String ISSUER;

    // @Value("${app.jwt.secret}")
    // private String SECRET;

    public static void main(String[] args) {
        // to make a new secret
        System.out.println(Encoders.BASE64.encode(Jwts.SIG.HS256.key().build().getEncoded()));
    }

    // Generate a token with the given username and roles
    public String generateToken(String username, String[] roles) {
        Map<String, Object> claims = new HashMap<>();
        claims.put("roles", roles);
        var now = Instant.now();
        return Jwts.builder()
                .claims()
                .subject(username)
                .add(claims)
                .issuedAt(Date.from(now))
                .expiration(Date.from(now.plus(1, ChronoUnit.HOURS)))
                .issuer(ISSUER)
                .and()
                // .signWith(key)
                .signWith(getSignKey())
                .compact();
    }

    public String generateToken(User user) {
        Map<String, Object> claims = new HashMap<>();
        claims.put("roles", user.getRoleNames());
        claims.put("firstname", user.getFirstname());
        claims.put("lastname", user.getLastname());
        // claims.put("userId", user.getId());
        String username = user.getUsername();
        var now = Instant.now();
        return Jwts.builder()
                .claims()
                .subject(username)
                .add(claims)
                .issuedAt(Date.from(now))
                .expiration(Date.from(now.plus(1, ChronoUnit.HOURS)))
                .issuer(ISSUER)
                .and()
                // .signWith(key)
                .signWith(getSignKey())
                .compact();
    }

    // Claims implements Map<String, Object> allowing users to easily extract the
    // claims
    public Claims extractAllClaims(String token) {
        return Jwts.parser()
                // .verifyWith(key)
                .verifyWith(getSignKey())
                .build()
                .parseSignedClaims(token)
                .getPayload();
    }

    private SecretKey getSignKey() {
        byte[] keyBytes = Decoders.BASE64.decode(SECRET);
        return Keys.hmacShaKeyFor(keyBytes);
    }
}
